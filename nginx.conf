map $http_upgrade $connection_upgrade {
  default upgrade;
  '' close;
}

server {
  root /app;
  # listen 443;
  listen 80;
  listen 443 ssl http2;
  ssl_certificate /etc/nginx/ssl/cert.crt;
  ssl_certificate_key /etc/nginx/ssl/cert.key;
  proxy_set_header Host $host;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_http_version 1.1;
  client_max_body_size 32m;
  gzip on;
  gzip_types text/plain application/javascript text/css;
  gzip_proxied no-cache no-store private expired auth;

  location ~ ^/kibana.* {
    rewrite ^/kibana/?(.*) /$1 break;
    proxy_pass http://kibana:5601;
    proxy_buffering off;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }
  location ~ ^/influxdb.* {
    rewrite ^/influxdb/?(.*) /$1 break;
    proxy_pass http://influxdb:8086;
    proxy_buffering off;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }

  location ~ ^/grafana.* {
      rewrite ^/grafana/?(.*) /$1 break;
      proxy_pass http://grafana:3000;
      proxy_buffering off;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }

  location ~ ^/grafana/api/live/ {
      proxy_http_version 1.1;
      rewrite ^/grafana/?(.*) /$1 break;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_set_header Host $http_host;
      proxy_pass http://grafana:3000;
  }

  location ~ ^/db.* {
    if ($request_method = 'OPTIONS') {
      add_header 'Access-Control-Allow-Origin' 'http://localhost:5001';
      add_header 'Access-Control-Allow-Methods' 'PUT, PATCH, GET, POST, OPTIONS';
      #
      # Custom headers and headers various browsers *should* be OK with but aren't
      #
      add_header 'Access-Control-Allow-Headers' 'Authorization,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
      #
      # Tell client that this pre-flight info is valid for 20 days
      #
      add_header 'Access-Control-Max-Age' 1728000;
      add_header 'Content-Type' 'text/plain; charset=utf-8';
      add_header 'Content-Length' 0;
      add_header 'Access-Control-Allow-Credentials' 'true';
      return 204;
   }
   if ($request_method != 'OPTIONS') {
      add_header 'Access-Control-Allow-Origin' 'http://localhost:5001' always;
      add_header 'Access-Control-Allow-Methods' 'PUT, GET, POST, OPTIONS' always;
      add_header 'Access-Control-Allow-Headers' 'Authorization,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
      add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
      add_header 'Access-Control-Allow-Credentials' 'true';
   }
    rewrite ^/db/(.*) /$1 break;
    proxy_pass http://db:5984;
    proxy_buffering off;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }


  location ~ ^/webapi.* {
    if ($request_method = 'OPTIONS') {
      add_header 'Access-Control-Allow-Origin' '*';
      add_header 'Access-Control-Allow-Methods' 'PUT, PATCH, GET, POST, OPTIONS';
      #
      # Custom headers and headers various browsers *should* be OK with but aren't
      #
      add_header 'Access-Control-Allow-Headers' 'uid,Authorization,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
      #
      # Tell client that this pre-flight info is valid for 20 days
      #
      add_header 'Access-Control-Max-Age' 1728000;
      add_header 'Content-Type' 'text/plain; charset=utf-8';
      add_header 'Content-Length' 0;
      return 204;
   }
   if ($request_method != 'OPTIONS') {
      add_header 'Access-Control-Allow-Origin' '*' always;
      add_header 'Access-Control-Allow-Methods' 'PUT, GET, POST, OPTIONS' always;
      add_header 'Access-Control-Allow-Headers' 'uid,Authorization,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
      add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
   }
    rewrite ^/webapi/(.*) /$1 break;
    proxy_pass http://server;
    proxy_buffering off;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }

  location ~ /.+\.\w+ {
    try_files $uri =404;
  }

  location ~ / {
    try_files $uri $uri/index.html /index.html =404;
  }
}
